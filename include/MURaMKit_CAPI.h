#ifndef MURAMKIT_CAPI
#define MURAMKIT_CAPI

#include <stddef.h> /* for size_t */
#include <stdint.h> /* for fixed-width integers */

#ifdef __cplusplus
namespace C_API {
extern "C" {
#endif

int mkit_smart_log(void* buf,      /* Input and Output: a buffer of double or float values */
                   int is_float,   /* Input: data type: 1 == float, 0 == double */
                   size_t buf_len, /* Input: number of values in buf */
                   void** meta);   /* Output: the meta data needed to perform a mkit_smart_exp()   *
                                    *    !! Note that the caller will need to free() this chunk of   *
                                    *       memory to prevent any memory leak !!   */

int mkit_smart_exp(void* buf,         /* Input and Output: a buffer of double or float values */
                   int is_float,      /* Input: data type: 1 == float, 0 == double */
                   size_t buf_len,    /* Input: number of values in buf */
                   const void* meta); /* Input: meta data generated by mkit_smart_log() */

size_t mkit_log_meta_len(const void* meta); /* Input: meta data generated by mkit_smart_log() */

int mkit_slice_norm(
    void* buf,       /* Input and Output: a buffer of double or float values */
    int is_float,    /* Input: data type: 1 == float, 0 == double */
    size_t dim_fast, /* Input: number of values in the fastest varying dimension */
    size_t dim_mid,  /* Input: number of values in the middle dimension */
    size_t dim_slow, /* Input: number of values in the slowest varying dimension */
    void** meta);    /* Output: the meta data needed to perform a mkit_inv_normalize()  *
                      *    !! Note that the caller will need to free() this chunk of    *
                      *       memory to prevent any memory leak !!                      */

int mkit_inv_slice_norm(
    void* buf,         /* Input and Output: a buffer of double or float values */
    int is_float,      /* Input: data type: 1 == float, 0 == double */
    size_t dim_fast,   /* Input: number of values in the fastest varying dimension */
    size_t dim_mid,    /* Input: number of values in the middle dimension */
    size_t dim_slow,   /* Input: number of values in the slowest varying dimension */
    const void* meta); /* Input: the meta data generated by mkit_normalize() */

size_t mkit_slice_norm_meta_len(
    const void* meta); /* Input: the meta data generated by mkit_normalize() */

int mkit_bitmask_zero(
    const void* inbuf,  /* Input: a buffer of double or float values */
    int is_float,       /* Input: data type: 1 == float, 0 == double */
    size_t len,         /* Input: number of values in buf */
    void** output);     /* Output: compressed form of input with a bitmask and all non-zero vals */

int mkit_inv_bitmask_zero(
    const void* inbuf,  /* Input: the compressed data produced by mkit_bitmask_zero() */
    void** output);     /* Output: the recovered original data */

size_t mkit_bitmask_zero_buf_len(
    const void* input); /* Input: the compressed data produced by mkit_bitmask_zero() */

#ifdef __cplusplus
} /* end of extern "C" */
}; /* end of namespace C_API */
#endif

#endif
